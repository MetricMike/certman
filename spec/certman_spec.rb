require 'spec_helper'

# rubocop:disable Metrics/BlockLength
describe Certman do
  it 'has a version number' do
    expect(Certman::VERSION).not_to be nil
  end

  context 'S3 bucket name' do
    it '3 =< FQDN.length < 54 generated by certman' do
      domain = '63.example.com'
      options = {}
      expected = '63.example.com-certman'
      expect(Certman::Client.new(domain, options).send(:bucket_name)).to eq expected
    end

    it '54 =< FQDN.length generated by certman' do
      domain = '0123456789012345678901234567890123456789012.example.com'
      options = {}
      expected = '7c0326349f8377cea67ea8752e9dcdb0c2442ac2-certman'
      expect(Certman::Client.new(domain, options).send(:bucket_name)).to eq expected
    end

    it '`www` subdomain support' do
      domain = 'www.63.example.com'
      options = {}
      expected = '63.example.com-certman'
      expect(Certman::Client.new(domain, options).send(:bucket_name)).to eq expected
    end

    it 'wildcard domain support' do
      domain = '*.63.example.com'
      options = {}
      expected = '63.example.com-certman'
      expect(Certman::Client.new(domain, options).send(:bucket_name)).to eq expected
    end
  end

  context 'SES rule name' do
    it '3 =< FQDN.length < 51 generated by certman' do
      domain = '64.example.com'
      options = {}
      expected = 'RuleCertman_64.example.com'
      expect(Certman::Client.new(domain, options).send(:rule_name)).to eq expected
    end

    it '51 =< FQDN.length generated by certman' do
      domain = '0123456789012345678901234567890123456789.example.com'
      options = {}
      expected = 'RuleCertman_ddb217d92c02b447e714a5af0f380d98c6e12cf4'
      expect(Certman::Client.new(domain, options).send(:rule_name)).to eq expected
    end

    it '`www` subdomain support' do
      domain = 'www.64.example.com'
      options = {}
      expected = 'RuleCertman_64.example.com'
      expect(Certman::Client.new(domain, options).send(:rule_name)).to eq expected
    end

    it 'wildcard domain support' do
      domain = '*.64.example.com'
      options = {}
      expected = 'RuleCertman_64.example.com'
      expect(Certman::Client.new(domain, options).send(:rule_name)).to eq expected
    end
  end

  context 'HostedZone' do
    it 'normal subdomain' do
      domain = 'dev.example.com'
      options = {}
      expected = 'example.com'
      expect(Certman::Client.new(domain, options).send(:hosted_zone_domain)).to eq expected
    end
    it '`www` subdomain support' do
      domain = 'www.example.com'
      options = {}
      expected = 'example.com'
      expect(Certman::Client.new(domain, options).send(:hosted_zone_domain)).to eq expected
    end
    it 'wildcard domain support' do
      domain = '*.example.com'
      options = {}
      expected = 'example.com'
      expect(Certman::Client.new(domain, options).send(:hosted_zone_domain)).to eq expected
    end
    it '`--hosted_zone` option' do
      domain = 'dev.example.com'
      options = { hosted_zone: 'dev.example.com' }
      expected = 'dev.example.com'
      expect(Certman::Client.new(domain, options).send(:hosted_zone_domain)).to eq expected
    end
    it 'subdomain with `--hosted_zone`' do
      domain = 'foo.dev.example.com'
      options = { hosted_zone: 'dev.example.com' }
      expected = 'dev.example.com'
      expect(Certman::Client.new(domain, options).send(:hosted_zone_domain)).to eq expected
    end
  end
end
